// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Estimate {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  category        String
  description     String?
  location        String?
  activityCode    String?
  parameters      Json?            // Store project-specific parameters like dimensions, slopes, etc.
  isFrozen        Boolean          @default(false)

  // Financial configuration (percentages)
  // Stored on Estimate so Abstract Bills and exports use consistent values
  cgstPercent     Float            @default(0)
  sgstPercent     Float            @default(0)
  cessPercent     Float            @default(0)
  contingency     Float            @default(0)   // contingency percentage
  contractualPercent Float         @default(0)   // Less contractual percentage

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  workItems       WorkItem[]
  measurementBooks MeasurementBook[]
}

model WorkItem {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  estimateId  String        @db.ObjectId
  estimate    Estimate      @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  itemNo      Int
  pageRef     String?       // e.g., "1/2 a", "332/18.07"
  description String
  unitId      String        @db.ObjectId
  unit        UnitMaster    @relation(fields: [unitId], references: [id])
  
  // Basic Calculations
  rate        Float
  length      Float         @default(0)
  width       Float         @default(0)
  height      Float         @default(0)
  quantity    Float
  amount      Float
  
  // Cost Breakdown
  materialCost    Float     @default(0.0)
  laborCost       Float     @default(0.0)
  equipmentCost   Float     @default(0.0)
  overheadCost    Float     @default(0.0)
  
  // Additional Fields
  discount        Float     @default(0.0)
  profitMargin    Float     @default(10.0)
  notes           String?
  
  // Status and Priority
  status          String    @default("active") // active, completed, cancelled
  priority        String    @default("medium") // low, medium, high, urgent
  
  subItems    SubWorkItem[]
  subCategories SubCategory[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([estimateId])
}

model SubCategory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  workItemId  String   @db.ObjectId
  workItem    WorkItem @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  categoryName String  // e.g., "A: Lead upto 100 m", "B: Lead upto 1000 m"
  description String?  // Optional description for the sub-category
  subItems    SubWorkItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([workItemId])
}

model SubWorkItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  workItemId  String   @db.ObjectId
  workItem    WorkItem @relation(fields: [workItemId], references: [id], onDelete: Cascade)
  subCategoryId String? @db.ObjectId
  subCategory SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  description String   // e.g., "Girth above 300 mm to 600 mm", "In Foundation"
  nos         Float    @default(1)
  length      Float    @default(1)
  breadth     Float    @default(1)
  depth       Float    @default(1)
  quantity    Float    // Calculated: nos × length × breadth × depth
  unitSymbol  String   // Display unit like "M³", "M²"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([workItemId])
  @@index([subCategoryId])
}

model UnitMaster {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  unitName          String             @unique
  unitSymbol        String
  createdAt         DateTime           @default(now())
  workItems         WorkItem[]
  rateLibrary       RateLibrary[]
  measurementEntries MeasurementEntry[]
  abstractBillItems  AbstractBillItem[]
}

model RateLibrary {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  description  String
  unitId       String     @db.ObjectId
  unit         UnitMaster @relation(fields: [unitId], references: [id])
  standardRate Float
  year         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([unitId])
}

model MeasurementBook {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  estimateId    String      @db.ObjectId
  estimate      Estimate    @relation(fields: [estimateId], references: [id], onDelete: Cascade)
  title         String
  description   String?
  location      String?
  contractor    String?
  engineer      String?
  status        String      @default("draft") // draft, submitted, approved, rejected
  submittedAt   DateTime?
  approvedAt    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  entries       MeasurementEntry[]
  abstractBills AbstractBill[]

  @@index([estimateId])
}

model MeasurementEntry {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  measurementBookId String         @db.ObjectId
  measurementBook   MeasurementBook @relation(fields: [measurementBookId], references: [id], onDelete: Cascade)
  entryDate         DateTime
  pageNo            String
  itemNo            String
  description       String
  unitId            String         @db.ObjectId
  unit              UnitMaster     @relation(fields: [unitId], references: [id])
  length            Float          @default(0)
  width             Float          @default(0)
  height            Float          @default(0)
  quantity          Float
  remarks           String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  abstractBillItems AbstractBillItem[]

  @@index([measurementBookId])
}

model AbstractBill {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  measurementBookId String         @db.ObjectId
  measurementBook   MeasurementBook @relation(fields: [measurementBookId], references: [id], onDelete: Cascade)
  billNo            String
  billDate          DateTime
  periodFrom        DateTime
  periodTo          DateTime
  contractor        String?
  engineer          String?
  status            String         @default("draft") // draft, submitted, approved, paid
  submittedAt       DateTime?
  approvedAt        DateTime?
  paidAt            DateTime?
  totalAmount       Float          @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  items             AbstractBillItem[]

  @@index([measurementBookId])
}

model AbstractBillItem {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  abstractBillId  String      @db.ObjectId
  abstractBill    AbstractBill @relation(fields: [abstractBillId], references: [id], onDelete: Cascade)
  measurementEntryId String?   @db.ObjectId
  measurementEntry MeasurementEntry? @relation(fields: [measurementEntryId], references: [id])
  description     String
  unitId          String      @db.ObjectId
  unit            UnitMaster  @relation(fields: [unitId], references: [id])
  quantity        Float
  rate            Float
  amount          Float
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([abstractBillId])
  @@index([measurementEntryId])
}
